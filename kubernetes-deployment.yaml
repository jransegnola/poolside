# 1. ConfigMap for initializing PostgreSQL (if needed)
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
data:
  init.sql: |
    BEGIN;

    CREATE TABLE IF NOT EXISTS messages (
        id SERIAL PRIMARY KEY,
        message text
    );

    INSERT INTO messages (message) VALUES ('hello world');

    COMMIT;
---
# 2. Deployment for the Website service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: website-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: website
  template:
    metadata:
      labels:
        app: website
    spec:
      containers:
        - name: website
          image: lonestaritalian/website:latest
          ports:
            - containerPort: 80
          volumeMounts:
            - name: website-volume
              mountPath: /var/www/html
      volumes:
        - name: website-volume
          emptyDir: {} 
---
# 3. Deployment for the API service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: api
          image: lonestaritalian/api:latest
          env:
            - name: DATABASE_URL
              value: "postgres://postgres:postgres@postgres-service:5432/messagesdb"
          ports:
            - containerPort: 3000
---
# 4. Deployment for the PostgreSQL database service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          env:
            - name: POSTGRES_DB
              value: "messagesdb"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "postgres"
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: init-sql-volume
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: init-sql-volume
          configMap:
            name: postgres-init-script
---
# 5. PersistentVolumeClaim for PostgreSQL data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# 6. Service for Website (Exposing on port 8080)
apiVersion: v1
kind: Service
metadata:
  name: website-service
spec:
  selector:
    app: website
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 80
---
# 7. Service for API (Exposing on port 3000)
apiVersion: v1
kind: Service
metadata:
  name: api-service
spec:
  selector:
    app: api
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---
# 8. Service for PostgreSQL (Exposing on port 5432)
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
# 9. Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-app-traffic
spec:
  podSelector:
    matchLabels:
      app: website
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: api
        - podSelector:
            matchLabels:
              app: postgres
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: api
        - podSelector:
            matchLabels:
              app: postgres
